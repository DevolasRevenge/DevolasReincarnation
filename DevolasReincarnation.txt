import bpy
import os


class Devola_PT_Panel(bpy.types.Panel):
    bl_idname = "ARMATURE_PT_panel"
    bl_label = "A2 Weights Manager"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Devola'
    
    
    def draw(self, context):
        layout = self.layout
        
        row = layout.row()
        row.label(text= "Automatic operators")
        row = layout.row()
        row.label(text= "Body Mesh", icon= 'OUTLINER_OB_MESH')
                                    
        row.operator("open.weightmix")
        
        layout = self.layout
        
        
        
        row = layout.row()
        row.label(text= "Body Mesh", icon= 'OUTLINER_OB_MESH')
                            
        row.operator("open.applymod")
        
    
        layout = self.layout
        
        
        
        row = layout.row()
        row.label(text= "Armature", icon= 'OUTLINER_DATA_ARMATURE')
                            
        row.operator("open.bonerename")
        
        
        layout = self.layout
        
        col = layout.column()
        
        col.prop(context.scene, 'conf_path')
        
        row = layout.row()
        
        row.label(text= "Body Mesh", icon= 'OUTLINER_OB_MESH')
                            
        row.operator("open.fixmats")
        
        
        
        
        row = layout.row()        
        row.label(text= "Test Script DevolasRevenge")
        row.label(text= "", icon= 'FUND')  
                
        

        
##----------------------------------------------------------------
                        
class OPEN_OT_WeightMix(bpy.types.Operator):
    """Add Weight Mix Modifiers for Rein Mesh"""
    bl_label = "Add Modifiers"
    bl_idname = "open.weightmix"
    
    def execute(self, context):
        
        object = bpy.context.active_object
        
        modifier = object.modifiers.new(name="Right_Leg_1", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "right_upleg"
        modifier.vertex_group_b = "sub_62"


        modifier = object.modifiers.new(name="Right_Leg_2", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "right_upleg"
        modifier.vertex_group_b = "sub_60"


        modifier = object.modifiers.new(name="Left_Leg_1", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "left_upleg"
        modifier.vertex_group_b = "sub_61"

        modifier = object.modifiers.new(name="Left_Leg_2", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "left_upleg"
        modifier.vertex_group_b = "sub_63"

        modifier = object.modifiers.new(name="Left_Arm_1", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "left_arm"
        modifier.vertex_group_b = "sub_71"

        modifier = object.modifiers.new(name="Left_Arm_2", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "left_arm"
        modifier.vertex_group_b = "sub_73"

        modifier = object.modifiers.new(name="Right_Arm_1", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "right_arm"
        modifier.vertex_group_b = "sub_70"

        modifier = object.modifiers.new(name="Right_Arm_2", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "right_arm"
        modifier.vertex_group_b = "sub_72"

        modifier = object.modifiers.new(name="Head1", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_c_upper_lip"

        modifier = object.modifiers.new(name="Head2", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_upper_lip"

        modifier = object.modifiers.new(name="Head3", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_upper_lip"

        modifier = object.modifiers.new(name="Head4", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_upper_lip"

        modifier = object.modifiers.new(name="Head5", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_outer_lip"

        modifier = object.modifiers.new(name="Head6", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_outer_lip"

        modifier = object.modifiers.new(name="Head7", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_brow1"

        modifier = object.modifiers.new(name="Head8", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_brow2"

        modifier = object.modifiers.new(name="Head9", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_brow3"

        modifier = object.modifiers.new(name="Head9", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_brow3"

        modifier = object.modifiers.new(name="Head10", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_eye"

        modifier = object.modifiers.new(name="Head10", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_inner_eyelid"

        modifier = object.modifiers.new(name="Head11", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_lower_eyelid"

        modifier = object.modifiers.new(name="Head12", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_l_outer_eyelid"

        modifier = object.modifiers.new(name="Head13", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_brow1"

        modifier = object.modifiers.new(name="Head14", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_brow2"

        modifier = object.modifiers.new(name="Head15", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_brow3"

        modifier = object.modifiers.new(name="Head16", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_eye"

        modifier = object.modifiers.new(name="Head17", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_inner_eyelid"

        modifier = object.modifiers.new(name="Head18", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_lower_eyelid"

        modifier = object.modifiers.new(name="Head18", type='VERTEX_WEIGHT_MIX')
        modifier.mix_set = 'ALL'
        modifier.mix_mode = 'ADD'
        modifier.vertex_group_a = "head"
        modifier.vertex_group_b = "fc_r_outer_eyelid"
        
        return {'FINISHED'} 
        
##-----------------------------------------------------
    
class OPEN_OT_BoneRename(bpy.types.Operator):
    """Rename Rein Armature Bones to NieR:Automata Bones"""
    bl_label = "Rename Bones (to A2)"
    bl_idname = "open.bonerename"
    
    def execute(self, context):
        
        object = bpy.context.active_object
        
        namelist = [("left_toe", "bone139"),
            ("right_foot", "bone134"),
            ("right_toe", "bone135"),
            ("left_foot", "bone138"),
            ("right_leg", "bone133"),
            ("left_leg", "bone137"),
            ("right_shoulder", "bone53"),
            ("left_shoulder", "bone80"),
            ("right_arm", "bone54"),
            ("left_arm", "bone81"),
            ("right_forearm", "bone55"),
            ("left_forearm", "bone82"),
            ("left_hand", "bone83"),
            ("right_hand", "bone56"),
            ("right_hand_thumb1", "bone57"),
            ("right_hand_thumb2", "bone58"),
            ("right_hand_thumb3", "bone59"),
            ("right_hand_index1", "bone60"),
            ("right_hand_index2", "bone61"),
            ("right_hand_index3", "bone62"),
            ("right_hand_index4", "bone63"),
            ("right_hand_middle1", "bone64"),
            ("right_hand_middle2", "bone65"),
            ("right_hand_middle3", "bone66"),
            ("right_hand_middle4", "bone67"),
            ("right_hand_ring1", "bone68"),
            ("right_hand_ring2", "bone69"),
            ("right_hand_ring3", "bone70"),
            ("right_hand_ring4", "bone71"),
            ("right_hand_pinky1", "bone72"),
            ("right_hand_pinky2", "bone73"),
            ("right_hand_pinky3", "bone74"),
            ("right_hand_pinky4", "bone75"),
            ("sub_10", "bone76"),
            ("right_forearm", "bone55"),
            ("sub_40", "bone78"),
            ("left_forearm", "bone82"),
            ("sub_20", "bone103"),
            ("sub_41", "bone105"),
            ("left_hand_thumb1", "bone100"),
            ("left_hand_thumb2", "bone101"),
            ("left_hand_thumb3", "bone102"),
            ("left_hand_index1", "bone96"),
            ("left_hand_index2", "bone97"),
            ("left_hand_index3", "bone98"),
            ("left_hand_index4", "bone99"),
            ("left_hand_middle1", "bone92"),
            ("left_hand_middle2", "bone93"),
            ("left_hand_middle3", "bone94"),
            ("left_hand_middle4", "bone95"),
            ("left_hand_ring1", "bone88"),
            ("left_hand_ring2", "bone89"),
            ("left_hand_ring3", "bone90"),
            ("left_hand_ring4", "bone91"),
            ("left_hand_pinky1", "bone84"),
            ("left_hand_pinky2", "bone85"),
            ("left_hand_pinky3", "bone86"),
            ("left_hand_pinky4", "bone87"),
            ("hip", "bone131"),
            ("spine1", "bone1"),
            ("spine2", "bone2"),
            ("spine3", "bone3"),
            ("neck", "bone4"),
            ("head", "bone5"),
            ("fc_c_jaw", "bone6"),
            ("sub_02", "bone52"),
            ("spring_f_breast001_01_02", "bone107"),
            ("left_upleg", "bone136"),
            ("right_upleg", "bone132"),
            ("fc_l_upper_eyelid", "bone8"),
            ("fc_r_upper_eyelid", "bone8")                    
            ]

        for name, newname in namelist:
            # get the pose bone with name
            pb = object.pose.bones.get(name)
            # continue if no bone of that name
            if pb is None:
                continue
            # rename
            pb.name = newname
            
        return {'FINISHED'} 

##-----------------------------------------------------  


class OPEN_OT_ConvertMesh(bpy.types.Operator):
    """Applies all Modifiers"""
    bl_label = "Apply Modifiers"
    bl_idname = "open.applymod"
    
    def execute(self, context):
        
        object = bpy.context.active_object 
        
        bpy.ops.object.convert(target='MESH')
        
        bpy.ops.object.modifier_add(type='ARMATURE')  
        bpy.context.object.modifiers["Armature"].object = bpy.data.objects["Armature"]

        
        return {'FINISHED'} 
    
##----------------------------------------------------- 


                        
class OPEN_OT_FixMats(bpy.types.Operator):
    """Fixes Viewport Rein Materials"""
    bl_label = "Fix Rein Materials"
    bl_idname = "open.fixmats"
    
    def execute(self, context):
        
        object = bpy.context.active_object 
        
        scene = context.scene
        file_tool = bpy.path.abspath(scene.conf_path)
        
        dir_list = []
        mso_list = []
        mso_string = "mso_.png"
        
        for path in os.listdir(file_tool):
            if (os.path.isfile(os.path.join(file_tool, path))):
                dir_list.append(path)
        
        mso_list = [i for i in dir_list if mso_string in i]
                
        print("Retrieved MSO Maps:")    
                  
        
        for material in bpy.data.materials:
            if not material.name.startswith("mt_"): continue
            material.blend_method = 'HASHED'
            
                        
            clean_name = material.name
            clean_name = (clean_name.replace('mt_', ''))
            
                    
            mso_value = [i for i in mso_list if clean_name in i]
            
            image_value = ''.join(mso_value)
            image_value = file_tool + "\\" + image_value
            print(image_value)
            #image_value = bpy.data.images.load(filepath = image_value)
            
            ##checks for empty MSO filepath
            if not mso_value:
                continue
            else:
                #adds the MSO map
                material.use_nodes = True
                nodes = material.node_tree.nodes
                inode = nodes.new('ShaderNodeTexImage')
                inode.location = (-1000,0)
                inode.image = bpy.data.images.load(image_value)
                
                links = material.node_tree.links
                
                RGB_split = nodes.new('ShaderNodeSeparateRGB')
                RGB_split.location = (-700,0)
                links.new(RGB_split.inputs[0], inode.outputs[0])
                
                links.new(nodes["Principled BSDF"].inputs['Metallic'], RGB_split.outputs[0])
                
                Invert_gloss = nodes.new('ShaderNodeInvert')
                Invert_gloss.location = (-500,0)
                
                links.new(Invert_gloss.inputs['Color'], RGB_split.outputs[1])
                links.new(nodes["Principled BSDF"].inputs['Roughness'], Invert_gloss.outputs[0])
                
                nodes["Principled BSDF"].inputs['Specular'].default_value = 0.1
                nodes["Principled BSDF"].inputs['Emission Strength'].default_value = 0.0
                
    
        
        return {'FINISHED'}


classes = [Devola_PT_Panel, OPEN_OT_WeightMix, OPEN_OT_BoneRename, OPEN_OT_ConvertMesh, OPEN_OT_FixMats]

def register():
    for cls in classes:
        bpy.utils.register_class(cls)
        bpy.types.Scene.conf_path = bpy.props.StringProperty \
          (
          name = "Rein Path",
          default = "",
          description = "Choose the Rein Model Folder",
          subtype = 'DIR_PATH'
          )


def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)
        del bpy.types.Scene.conf_path
    
if __name__ == "__main__":
    register()
